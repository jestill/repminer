#!/usr/bin/perl -w
#-----------------------------------------------------------+
#                                                           |
# Name.pl                                                   |
#                                                           |
#-----------------------------------------------------------+
#                                                           |
#  AUTHOR: James C. Estill                                  |
# CONTACT: JamesEstill_@_gmail.com                          |
# STARTED: 04/04/2008                                       |
# UPDATED: 04/04/2008                                       |
#                                                           |
# DESCRIPTION:                                              |
#  Given a database of sequences this will use BLAST to     |
#  annotate an LTR retortransposon. Results are stored      |
#  in a table or database.
#                                                           |
# USAGE:                                                    |
#  ShortFasta Infile.fasta Outfile.fasta                    |
#                                                           |
# VERSION: $Rev$                                            |
#                                                           |
#                                                           |
# LICENSE:                                                  |
#  GNU General Public License, Version 3                    |
#  http://www.gnu.org/licenses/gpl.html                     |  
#                                                           |
#-----------------------------------------------------------+

package REPMINER;

#-----------------------------+
# INCLUDES                    |
#-----------------------------+
use strict;
use Getopt::Long;
#use lib "$ENV{HOME}/src/bioperl";
use Bio::Seq;
use Bio::Tools::Run::StandAloneBlast;
use Time::HiRes qw( usleep ualarm gettimeofday tv_interval nanosleep
		    clock_gettime clock_getres clock
		    stat );

#-----------------------------+
# PROGRAM VARIABLES           |
#-----------------------------+
my ($VERSION) = q$Rev$ =~ /(\d+)/;

#-----------------------------+
# VARIABLE SCOPE              |
#-----------------------------+
#my $infile;
my $indir;
my $outfile;

# Booleans
my $quiet = 0;
my $verbose = 0;
my $show_help = 0;
my $show_usage = 0;
my $show_man = 0;
my $show_version = 0;

# Default values
my $max_e_val = 0.00001;

#-----------------------------+
# COMMAND LINE OPTIONS        |
#-----------------------------+
my $ok = GetOptions(# REQUIRED OPTIONS
		    "i|indir=s"   => \$indir,
                    "o|outfile=s" => \$outfile,
		    # ADDITIONAL OPTIONS
		    "e|e_val"     => \$max_e_val,
		    "q|quiet"     => \$quiet,
		    "verbose"     => \$verbose,
		    # ADDITIONAL INFORMATION
		    "usage"       => \$show_usage,
		    "version"     => \$show_version,
		    "man"         => \$show_man,
		    "h|help"      => \$show_help,);

#-----------------------------+
# CHECK FOR REQUIRED OPTIONS  |
#-----------------------------+
# infile and outfile required

#-----------------------------+
# SHOW REQUESTED HELP         |
#-----------------------------+
if ($show_usage) {
    print_help("");
}

if ($show_help || (!$ok) ) {
    print_help("full");
}

if ($show_version) {
    print "\n$0:\nVersion: $VERSION\n\n";
    exit;
}

if ($show_man) {
    # User perldoc to generate the man documentation.
    system("perldoc $0");
    exit($ok ? 0 : 2);
}

#-----------------------------+
# MAIN PROGRAM BODY           |
#-----------------------------+

my $seq_id = "1";
my $seq_string = "TGTCGGCGTTTCGAGACCGGGGGGTCCCTGGACCGACGAGTAAATTGTCGCCGCGTGCCCCAGCCCAGATGGGTCGGCGCGAGACGGAGCGCGAAGGGGGGAGGCAGCCGGAGGGAGACGGGCATGAGAGGTGGAAATCCCGCGGCCTTCGTGTTTGTCCCGCGCCCAGGTCGGGTGCGCTTGCAGTAGGGGGTTACAAGCGTCCACACGGGAGGGAGCGAGCGGCCTCACGCGAGCGCCTGTCCCGTCCTTCCCCGCGCGGCCAACCCTCCGTAAGAGGGCCCTGGTCCTTCCTTTTATAGGCGCAAGGAGAGGATCCAGGTGTACAGTGGGGGGTGTAGCAGTGTGCTAACGTGTCTAGCGGAGGAGAGCTAGCGCCCTAAGTACATGCCATCATGGCAGCCGGAGAGGTTTTGGCACCCGGTTCGTGTGGTGTCGTGGTCGTCGGAGGAGCGCTGGAGCCTGGCGGAAGGACAGCTGTCGGGGCTGTCGAGTCCTTGCTGACGTCCTCTTGCTTCCGTAAGGGGGCTGAGAGCCGCCGTCGTCATAGAGCGTGCGGGGCGCCATCATTACTTGTCTGGCGGAGCGAGCCAGATGGGACGCCGGTCTTGTTCCCCGTAGCCTGAGTCAGCTTGGGGTAGGGTAATGATGGCGCCTCCTGTTGACGTGGTCGGTCCGTGCCCTGGGTTGGACGATGTGGAGGCTCCTCCGAGGTCGAGGTCGAGTCTGTCTTCCGAGGCCGAGGTCGAGTCCGAGCCCCTGGGTCGGGCGAGGCGGAGACCGTCGGCTGAGGCCAGGGCTGAGTCTGAGTCCGAGCCCTAGGGTCGGGCGAAGCGGAGTTCGTCGTCTTCCAGGGCTGAGCCCGAGTCCGAGCCCTGGGGTCGGGCGAAGCGGAGTTCGTCGTCTTCCGGGGCTGAGCCCGAGTCCGAGCCCTGGGGTCGGGCGAAGGGGAGTTCGTCGTCTTCAGGGGCTGAGCCCGAGTCCGAGCCCTAGGGCCGGGCGAAGTGGAGTTCGTCGTCTTCCGGGGCTGAGCCCGAGTCCGAGCCCTGGGGTCGGGCGAAGTGGAGTTCGTCGTCTTCAGGGGCTGAGCCCGAGTCCGAGCCCTGGGGTCGGGCGAAGCGGAGTTTCCTATGGCGCCTGAGGCCGGGCCTGGCTGCTTGTCAGCCTCACTCTGTCGAGTGGCACAACAGTCGGAGCGGCGCAGGCGGCGCTGTCCTCTTGTCAGACTGGTCAGTGGAGCGGCGAAGTGACTACGGTCACTTCGGCTCTGTCGACTGGAGGGCGCGCGTCAGGATAAAGGTGTCAGGCCACCTTTGCATTAAATGCCCCTGTGATTTGGTTGGTTGGCGTGGCGATTTGGCCAAGGTTGCTTCTTGGTGAAGGCTGGGCCTCGGGCGAGCCGAAAGTATGTCCGTTGCTGGAGGGGGCCTCGGGCGAGACGTAGATCCTCCGGGGTCGGCTGCCCTTGCCCGAGGCTGGGCTCGGGCGAGGCGTGATCGGGTCCCTCGAATGGACCGATCCTCGACTTAGTCGCACCCATCAGGCCTTTGCAGCTTTGTGCTGATGGGGGTTATCAGTTGAGAATTAGGAGTCTTGAGGGTACCCCTAATTATGGTCTCCGACAGTAGCCCCCGAGCCTCGAAGGGAGTGTTAATACTCGCTTGGAGGCTTTTGTCGCACTTTTTTGCAAGGGGACCAGCCTTTCTCGGTTGCGTTTTGTTCCGGTGGGTGCGCGCGAGCGCACCCGCCGGGTGTAGCCCCCGAGGCCTCAGAGGAGTGGTTTGACTCCTTCGAGGTCTTAATGCCTCGCGCAATGCTTCGGCTGGTCTGGTCGTTCTCTCATGCGAGCTGGCCGTAGCCCGGGTGCATGGTCGGGTCCCAAGTTCTCGGGCTGGTATGTTGACGCTGTCAATAGTTTGGCCGGAGCCGGGTTTGCGAGAGCAGCCCCCGAGCCTCTGCACAGGGCGAGAGGACGGTCAGGGATAGACTCAACTTTTTTACATACGCCCCTGCGTCGCCTTTCCGCAAGGAGGAGGGGGAAAGCGCCATGTTGCCCTCGGAGGGCGCCGAACATGGTGTCTCCGGTGAGCTGCTGGCGGGTAATCCGAGTGGACGCCCGTGCCCCATTTGTTAGGGGTCGGCTAGAGGCCCGGAGGCGTGCTCAAAAGTACCTGCAGGTGATCTGCCGGACCCGGTCCCCTTTCGACGGGGTCCGAGGGCTCGATGCCTCCCTCTGATGGGATTCTGTTACAAGATCGTTCCCGCCGGTCTCGGAAATGTCCTAGGGTACCTTGGGAGTGTAGCCCGAGCCTTGGTTATGTATCGAACGTACCCAGGGTCATCCCTCGCTTTGTGTCTGAGGCGGCTGTGAACCCTTCGAGGGCGAACCTATGAACCCCTGATCAGTAGTGGACGCGGAGCCCGAGTGGCCTGAGGCGGCCGTTGAACCCTTCTGAGGGGCCGGCCTTCGAACCTCTGACCAGTAGTGGGCGCAGAACCCAAGCGCTCTGAGGCGGCTGTTGAACACCTCCGAGGGGCCAGCCTTCGAACCTCTGATCAGTAGTGAGGCTCGGGGCCTGTTTCCTTCACGGAGAAGGATCCTTTTCGGGGTATCCCCCTTTCCCGGTCCCTGTTGTAAGAGAGAGAAAGAGGAAAAGGATACGAAATTGAATGACGTGGCGTACCTTTTTTGACACGGTCATTATGGCGAAGGCGAAGCGTCGCTTGCTTCCCCTGCCAGAGGCGCCGCCTGTCCCGCCGCGGAGTTAATGCGATGGGGCGAGTGGTTCGCGAGGCGGCCGTTGTGCGTGCGCGAGCCTTCGAGGAACGAAACACGGGCGCGCCGTCTTCACGCCGTGAGAGAGGGTTCTCTCGCTGCCCCTGGATGGGACGTAAGCTTGGCTGACGACGTGACCGCTGCTCCTGCCCGCCAGCCACCGCCATTACTGCCGACCCATTTTTGGCCGTATTGACCGTTGCGCCTGGCTGGCACTGCTGGGTCGTACGCAGGGTTGCCTCGAGTCGCGATACTGGTTCTGCAGTCGAGGAGGCGTGGTAGTGGCGCGAGTGGCGGTGCAGTTGCTCGCACGTAGCAACCGGCGCGTCGGTTGCATGACGCGTGGGCCTGGGCCTCCATACTGGGTGCGTTGGAAGTTGGAGGGGCGCGCCCACTTGGCGCGGTTGCATGCCGCCTGCGCGGCTGTCCGCCCTTTCACCCGCTGGTCTGGGCGAAAGTGGAGGAATGCTTGTAACCGCTGGGCGGTTGCATGCATCGCGCGCGACGGTTTGGCTTCTTCTGCCCTGGGCCAGTTTGCATGACGCGTGGGACCCAGCCCCCGCGCCGTAGGGGGAGGACCTTGGAGTGTGTTAGAGAAGACTCAGCCCACGACGGCTGTGGACGCAAGTAGGGAGAGTCGCCTTTAAAAGGAGGGTGACCCCCTTGAAAGGCGACCATGTCTTCGCGCTCCCTTATGCATCGTGTCTTTCCACCTTCCGAGCCCCCGGATGGGGGACACCCGCAATCCTTCCGCCTTGTCATTGGAGGAACGCAACTTCGTGGAAGTTGGTACCTTTCAGCCATCGTTCGGCTTCAAGGATTTTCATCACGCGGCCTGGCTGCATCCCCTCGCCGGTGGTCACCCGAGACGGTGACCACCAGCCCCTGGATGGGGAGAAGCAAGCCGGGCTGCGATCTTAGTCCCGTCCTCAGCTTCAAGGATGTTCATCATCCTTGCTGGGGCGGAGAGCGAGGCGAGCCGGGGCTCTACCTTCCGCACGGGTCGGCTGGCCACCTCCTCTTTCAGCTTCTGGTGGTGGAAACCATCCTCCAGCTCTGCGGAGGAGGCGTCCTCCAGCCATGCCGGGGGAGGCAGACTGTTGCTGCCCAGCTAGGATGCAACATTCCGTCCTCTTCCTCGCTTGCGTGGCGAGGACGGGAGCGAGGACCTGCCGGTGCGCTTTGGAGCGGCCCGCTCTTTGGCTTTGATGTCTGGTTCGCGTCCCTTGAGCGGGGACGCGAACGAGAGCCTTCCGGTGGCCGCGTCCGTCCTGGGACCATAGCTGCTGCTGCAGAGGTCGCTGGCGAGTCACCCAGAACTTGTCGCCCCGTAGGCTCCCTGGTGTGGAGGTTGTTCATACCCGCGGGGACGGAACCAGAGTTCTGTTTGTAATGGCACCTTGAATGCCGGTCTTTTGTTCATTGTGGCTGTCGGGGCCTGAACATGTATGTATTTTCGGCACGGAGCCGTGTTTTTTTCCTCATTTCGAGCACTAAGACTCGCCTGTTGGTTATCTGAACCGCTTCACCAAGCGTGAGTCGCCCCGTGCAAAGGTGACGAGTGAGGTATCCGTATCCCGGAGGCGTAGGAGTCCCTCGGCTCGGTTGGCCTTGCTGTCCGAGGCTTCTCTTGCTTAGTTAAAGGAACCCCTCGGCCGCTCTTCGATGAGCCGAAGCCAGGGGTAGCGGTGTCAGCACGGACAGAGGCAGAGTTGGCTCGAAAAGAAGACTTGGTCGGCCAGAGCCTGGCCGGGTCGTCCACTGGCGGAACCGACGCCGGAATTGAGTTGCTGAGGCCTCGGGCTGAGCTGATGTCTTCGGGGGACAGCTGGCCGAGGCCTCGGAGTGACCGGCCGAGCCGTCTGCTCGAGCCGGATTCCCGGAGAAGACCCTAGCGGCGATGGCCTGGGCGTGGTGCTGATGTCGTCCTTCAGAGTGGAGATCCTCCGACCGCGTCGCCGTCCGAGGCTAGGTCGGACCTCGCCGAAGGTGTAGTTGACGCCGAGGGTGCTGCTGCTCCCTTCAACTGTCAAGATCCGAGCCTGCAGGATTGGATTATCTTGTAGCGTGTGTTCTCTGCGGCCGCCGAGGCCCAAACACATCATCGTCGTGTTGTAAAGCTGCGCTTCTTTTCCTCTTGTTTCGAGTATCTGGACTTCTTTGTCAGTAACAGAATTGTCTGTGCGAGCGAGAGTTGCTTTTCATGGAAGGCGATGAGTGAGGTATCTGTATCCCGGAGGCGTAGGAATCCCTCGGCTCGGTCGGCCTTGCCGCTTACGTGCACTCTTACCCGTCCATAGGGTTCTGTCACCGACGCAGTCGAGAAGGCCCGAAAAATCGTTCCGGCAGAGGAGCTTTCGAGCGCGAAGACTTGTTCGGTCCGCGGAATCACTTATCGGAGCGCGAGTTACTTATCACAGAAGGTGATGAGTGAGGTATCCGTATCCCGGAGGCGTAGGAGTCCCTCGGCTCGGTCAGCCTTGGCTGCTTACGTGCACTCCATCGTTTTCAGGATCCACTTTCGAAGTAGTCGAGAAGCACGAAAGACATTCTGGCAGAAAAGTTTTTTCGAGGAAAATTTCGACGCAGAGGGGGTTCCCCCCTTTTAGCCCCCGAGGGAGGGTCGAGCTTTGCCGAGGCAAGGCTGACCCTTCCTTGATGACTAAACTTTGTGTGGGAACGAGGTATACGAACAACTTGAAAACATCTTAAGGGTAGAAGCGACGTAGCTGTTGGATGTTCCAAGCGTTGTTGTAGACCTCACCTTGACTGTTGGCCAGCTTGTACGTTCCGGGCTTCAGAACTTTGGCGATGACGAATGGCCCTTCCCAGGGAGGTGTGAGCTTGTGCCGCCCTCGGGCGTCTTGTCGCAGCCGAAGCACCAGGTCGCCCACCTGGAGGTCTCGGGACCGAACCCCTCGGGCGTGGTAGCGTCGCAGGGACTGCTGGTACCGCGTCGAGTGTAGTAAGGCCATGTCCCGAGCCTCTTCCAGCTGGTCCAATGAGTCTTCTCGACTAGCTTGATTGCTTTGGTCGGCGTAGGCCCTCGTCCTCGGGGAACCGTATTCTAAGTCTATGGGCAAGGTGGCCTCGGCCCATAGACTAGAAAGAACGGCGTGAAGCCCGTGGCTTGACTCGGCGTTGTCCTCAGACTCCAGACCACCGAGGGGAGTTCCTTCATCCATCGCTTGCCAAACTTGTTGAGGTCGTTGTAGATCCGAGGCTTGAGTCCTTGTAGAATCATACCGTTGGCACGCTCTACTTGCCCATTCGTCATGGGGTGAGCCACAGCGGCCCAGTCCACCCGGATGTGCTGATCCTCGCAGAAGTCCAGAAACTTTCTGCCGGTGAACTGGGTGCCGTTGTCGGTGATGATGGAGTTTGGGACCCCAAAGCGATGGATGATGTTGGTGAAGAACGCCACCGCCTGTTCGGACCTGATGCTGTTTAGGGGTCTTGATGGCCTTCCGAGGGGCGAACGAGCTCGTTTCGCCCATGATTTCCACCGCCCACTTTGCAATTCTACCCGAGGCCTCTCGGCACTGGATGATCTCCCCCAGGGGGAAGGATGACACCACAGTTACCAGATGAGACTCGAAGTAGTGCCGCAACTTCCGCCGCGTCAGGATCACCGCGTATAGCAGCTTCTGAATTTGTGGGTAGCGGATCTTGGTCTCGGACAGTACCTCGCTAATGAAGTAGACTGGCCTCTGGACGGGCAATGTATACCCCTCTTCTCGTCTCTCAACCATAATCGCGGCGCTAACCACCTGAGTGGTCGCGACGACGTAGATCAAGAGGGCTTCTCCGGCAGCGGAGGGCACCAAGATGGGCGCGTTTGTAAGGAGCGCCTTCAGGTTCTCGAGGGCTTCCTCGGCCTCAGGGGTCCAAGTGAAGCACTCGGCCTTCCTTAAGAGGCGGTACAGAGGCAGGCCTCTTTCGCCGAGGCGCGAGATGAAGCGGCTCAGTGCCGCAAGGCATCCCATGACTCTCTGTACGCCTTTCAAGTCCTTGATGGGCCCCATGCTGGTGATGGTCACGATCTTCTCCGGGTTGGCTTCGATGCCCCGCTCGGAGACGATGAACCCCAAGAGCATGCCTCAGGGAACCCCGAAGACACACTTCTCGGGATTGAGCTTCACGCCTTTCGCCTTGAGACATCAGAATGTCACTTCAAGGTCGGAAAGGAGGTCAGAGGTTTTCCATGTCTTGACTACGATGTCATCGACGTAGGCCTCAACCGTCCGACCAATGTGTTTGCCGAACACATGGTTCATGCACCGTTGGTACGTCGCACCCGCATTCCTCAAGCCGAACGGCATGGTGACATAGCAGTACATGCCGAAGGGTGTGATGAAAGAAGTCGCGAGCTGGTCGGACTCTTTCATCCTGATTTGGTGATACCCCGAGTAGGCATCGAGGAAAGACAGGGTTTCGCACCCAGCAGTGGAGTCCACGATTTGGTCGATGCGAGGCAGATGGTAGGGAACCTTCGGACATGCTTTGTTTAGACCAGTGTAGTCTACACACATCCGCCATTTCCCTCCTTTCTTTCTCACAAGCACAGGGTTGGCAAGCCATTCGGGATGGAATACCTCTTTGATGAACCCTGCCGCCATTAGCTTGTGGATTTCCTCGCCTATGGCTCTGCGCTTTTCTTCGTCGAATCGGCGCAGAGGCTGCTTCACGGGTCAGGCTCCAGCTTGGATATCCAGCGAGTGCTCGGCGACATCCCTCGGTATGCCGGGCATGTCCGAGGGACTCCACGCAAAAACGTCGGCATTCGCGCGGAGAAAGTCGACGAGCACTGCTTCCTATTTGGGATCGAGCTCGGAGCCGATCCGGATCTGCTTGAAGGCGTCGCTGCTGGGGTCGAGGGGGACGGACTTAACCGTCTCCGCTGGCTCGAAGTTGTCGGCGTGGCGCTTCATGTCTGGCACCTCCTTAGAGAGGCTCTCCAGGTCGGCGATGAGGGCCTCGGATTCGGCAAGGGCCTCGGCATACTCCATGCACTCCACGTCGCATTCGAACGCGTGTCGGTACGTGGGGCCGACGGTGATGACCCCGTTGGGGCCCGACATCTTGAGCTTGAGGTAGGTGTAGTTGGGGACGGCCATGAACTTCGCGTAGCATGGCCTCCCCAGTACTGCATGGTAGGTTCCTCGGAACCCGACCACCTCGAACGTGAGGGTCTCCCTTCGGAAGTTGGAGGGCGTCCCAAAGCAGACGGGAAGATCGAGTTGTCCGAGGGGCTAGACGCGCTTCCCGGGGATGATCCCATGGAAAGGCGCAGCGCCTGCCCGGACCGAGGAGAGATCAACACGCAGGAGCCCGAGGGTCTCGGCGTAGATGATGTTGAGGCTGCTGCCTCCGTCCATGAGGACCTTGGTGAGCCTGACGTCGCCGATGACGGGGTTGACAACGAGCGGGTATTTCCCCAGGCTAGGCACGCGGTCGGGGTGGTCGGCTTGGTCGAAGGTGATGGGCTTGTCGGACCAGTCTAGGTAGACTGGCGCCGCCACCTTTACCGAACAGACCTCCCGACGCTCTTGGTTGCGGTGCCGAGCCGAGGCGTTCGCCGCTTGCCCACCGTAGATCATGAAGCAGTCGCGGACCTCGGGGAACTCTCCTGCCTAGTGATCTTCCTTCTTATCGTCGTCGCGAGCCCTGCCACCCTCCGCGGGTGGCCCGACCCTATGGAAGTGGCACCGAAGCATGGCGCATTCCTCAAGGGTGTGCTTGACGAGCCCCTGATGATAGGGGCACGACTCCTTGAGCATCTTGTCGAAAAGGTTGGCACCTCCGGGGGGTTTCCGAGGGTTCTTGTACTCGGCGGCGGCGACAAGGTCCGCGTCGGCGGCGTCGCGTTTCGCTTGTGACTTCTTCTTGCCTTTCTTCTTGGCGCCGCGCTGAGTTGACGCCTCGGGGGCATCTTCCAGTGGGCGGCCCTGGGGCTGCTTGTCCTTCCGGAAGATAGCCTCAACCGCCTCTTGGCCAGAGGCGAACTTGGTGGCGATGTCCATCAGCTCGCTCGCCCTGGTGGGGGTCTTACGACCCAGCTTGCTCACCAGGTCGGGCAGGTGGTGCCGGCAAGGAACGAGCCGATGACATCTGAATCGATGATGTTGGGCAGCTCGGTGCGCTGCTTCGAGAATCGCCGTATGTAGTCCCGGAGAGACTCTCCCGGCTGCTGTCGGCAGCTTCGGAGGTCCCAGGAGTTTCCAGGGCGCACGTACGTGCCCTGGAAATTGCCGGCGAAGGCTTGGACCAGGTTGTTCCAGTTGGAGATCTGCCCCGGAGGCAGGTGCTCCAACCAGGCGCGAGCGGTGTCGGAGAGGAACAGGGGGAGGTTGCGGATGATGAGGTTGTCATCGTCCGTTCCACCCAGTTGGCAGGCCAGCCGGTAGTCCGCGAGCCACAATTCCGGTCTCGTCTCCCCCGAGTACTTTGTGATAGTAGTCGGGGTTTGGAACCGGGTCGGGAACGGCGCCCGTCGTATGGCGCGGCTGAAAGCCTGCGGACCGGGTGGTTCGGGCGAGGGACTCCGATCCTCCCCGCTGTCGTAGCGTCCCCCACGCCTGGGGTGGTAGCCTCGGCGCACCCTCTCGTCGAGGTGGGCCCGACGGTTGCTGTGATGGTGCTCGTTACCGAGGCGACCCGGGGCCGCAGGCGCTGTGTTGCGCGTGCGCCCGGTGTGGACCGAGGCTTCCCGCATGAATCGGGAAGTCGCGGCGCGATGTTCCGAGGGGTACCCCTGCCTTCGGGAGGCGGAGCTTTCGGCTCGTCGGACCGTGGCGTCCTCCAGGAGATTCTTGAGCTCTCCCTGGATTCGCCGCCCCTCGGTGGTTGATGGCTCCGGCATCACGCGGAGGAGCATTGCCGCTGCAGCCAGGTTCTGGCTGACTCCACTGGAAGTGGGTGGCGGCCTTACCCTGACATCGTCGGCGATGCGGTGCTGGAAACCCTGGGGTAGATGACGCACTTCCCCGTCCGGAGGTTGGCCCGCCCATTCCTGCCCGACGTCCCGGCGGATCGGCTCAAGTGTTCCTGCTCCCTCGTCGAGCCTGGCCTGCACCCCGCGGATTTGCTCGAGCTGTGGGTCATGACCCCCGCCGGAACAGGGACCACAGGTAGCTCCCGTAGGATGTCAACGCGAGGCATAGGCCTAGGGAGATCACCATTCTCCGGCATACCAAGATGGTTGCCTTCGGAGGGACCCCCTAGATCGACGTGGAAACATTCACGACTTGGGCCACAGTCCTCGTCGTCGAGGCTGCGGCTACCGTCGGAACAGTCGGAAAGGCAGTAGTCACACGCGGTCATAAAGTCCCGTATGGAACTGGGGTTACCAAGTCCGGAGAAATCCCAACAGAAGTCGGGCTCGTCATCTTCCTCGGACCCCGAGGGCCTGTAGGTCGAGACGTCCGTCAGCCGGTCCCAAGGTGACCGCATATGATACCCCAGAGGGTTTGGACTCGCCTCTACGAGAGTGTCCACCAAAGCGAAGCCGCTTGGCGGGTCGAGGCTGAATCCAAAAGGCGTGAGATGGGAATCGGTTGGTACCTCTTGGTCGACGGGCGGTGACGAAGTCACGTCAGGGACTTACTGCACCATCGTCTCAGGTACGAGGGTGACGCCCAGCAAGTCCTTCGCGAGCGTGCTGGCGTCGTTCGTTTGCTTGGGATTGGCGCGTTGCGGGGAGACGGCGCTCGTCTTCGTCTCAGACGCGAGGTCGATGCTCGACGTGCCCCCCCGTTGGGGCGCCGGCGCCGTCGACTTGCTCGACGGCCGACGAGGTGCCGCCTCCTGCTTGGCCTTGGTTGTCCCGCCTCCTCCTCCGTCGATGGGGGAGGGGACGGGGTGAGCTCGAATGTTGTTCTTCCACCACGCGGGGAAGACGTCGTTGATTCCGCCGCCGGCGGGCGGGCTGTCGGCCGCCATTGTCGCTGTCGTACGGCGGGGGAAGGAGTATCATGTCGTAGCTGCCGTCGAGGGACATGAACTCAAGACTCCCGAAACGGAGCACCGTCCCGGGCTGGAAAGGTTGCTAGAAACTGCCCATCTGGAGCTTGACGGGAAGCTGTTCGTCAACACACAGCAGGCCCCTACCTGGCGCGCCAACTGTCGACGTTTCGAGACCGGGGGGGTCCCTGGACCGACGAGTAAATTGTCGCCGCGTGCCTCAGCCCAGATGGGTCGGCGCGAGACGGAGCGCGAAGGGGGGAGACAGCCGGAGGGAGACGGGCGTGAGAGGTGGAAATCCCGCGGCCTTCGTGTTTGTCCCGCGCCCAGGTCGGGTGCGCTTGCAGTAGGGGGTTACAAGCGTCCACGCGGGAGGGAGCGAGCGGCCTCACGTGAGCGCCTGTCCCGTCCTTCCCCGCGCGGCCAACCCTCCGTAAGAGGGCCCTGGTCCTTCCTTTTATAGGCGCAAGGAGAGGATCCAGGTGTACAGTGGGGGGTGTAGCAGTGTGCTAACGTGTCTAGCGGAGGAGAGCTAGCGCCCTAAGTACATGCCATCGTGGCAGTCGGAGAGGTTTTGGCACCCGGTTCGTGTGGTGTTGTGGCCGTTGGAGGAGCGCTGGAGCCTGGCGGAAGGACAGTTGTCGGGGCTCTCGAGTCCTTGCTGACGTCCTCTTGCTTCCGTAAGGGGGCTGAGAGCCGCCGTCGTCATAGAGCGTGCGGGGCGCCATCATTACTTGTCTGGCGGAGCGAGCCAGATGGGACGCCGATCTTGTTCCCCGTAGCCTGAGTCAGCTTGGGGTAGGGTAATGATGGTGCCTCCTGTTGACGTGGTCGGTCCGTGCCCTGGGTTGGACGATGTGGAGGCTCCTCCGAGGTCGAGGTCGAGTCTGTCTTCCGAGGCCGAGGTCGAGTCCGAGCCCCTGGGTCGGGCGAGGCGGAGACCATCGGCTGAGGCCAGGGCTGAGTCTGAGTCCGAGCCCTGGGGTCGGGCGAAGCAGAGTTCTTTGTCTTCCGGGGCTGAGCCCGAGTCCGAGCCCTGGGTCGGGCGAAGCGGAGTTCGTCGTCTTCTGGGGCTGAGCCCGAGTCCGAGCCCTAGGGTCGGGCGAAGTGGAGTTCGTCGTCTTCAGGGGCTGAGCCCGAGTCCGAGCCCTGGGGTCGGGCGAAGCGGAGTTCGTCGTCTTCCGGGGCTGAGCCCGAGTCCGAGCCCTGGGGTCGGGCGAAGTGGAGTTCGTCGTCTTCAGGGGCTGAGCCCGAGTCCGAGCCCTGGGGTCGGGCGAAGCGGAGTTTCCTATGGCGCCTGAGGCCGGGCCTGGCTGCTTGTCAGCCTCACTCTGTCGAGTGGCACAGCAGTCAGAGCGGCGCAGGCGGCGCTGTCCTCTTGTCAGACCGGTCAGTGGAGCGGCGAAGTGACTACGGTCACTTCGGCTCTGTCGACTGGAGGGCGCGCGTCAGGATAAAGGTGTCAGGCCACCTTTGCATTAAATGCTCCTGCGATTTGGTCGGTTGGCGTGGCGATTTGGCCAAGGTTGCTTCTTGGTGAAGGCTGGGCCTCGGGCGAGCCGAAAGTATGTCCGTTGCTGGAGGGGGCCTCGGGTGAGACGTAGATCCTCCGGGGTCGGCTGCCCTTGCCCGAGGCTGGGCTCGGGCGAGGCGTGATCGGGTCCCTCGAATGGACCGATCCTCGACTTAGTCGCACCCATCAGGCCTTTGCAGCTTTGTGCTGATGGGGGTTACCAGCTGGGAATTAGGAGTCTTGAGGGTACCATAATTATGGTCCCCGACA";
my $blastdb = "/db/jlblab/pfam/rvt_1_poaceae";
my $feat_name = "rvt";



my $time_start = Time::HiRes::time();

# listed in order expected in huck
my @blast_dbs = ("/db/jlblab/pfam/gag_poaceae",
		 "/db/jlblab/pfam/zf_cchc_poaceae",
		 "/db/jlblab/pfam/rvp_poaceae",
		 "/db/jlblab/pfam/rve_poaceae",
		 "/db/jlblab/pfam/rvt_poaceae", # both rvt_1 and rvt_2
		 "/db/jlblab/pfam/rh_poaceae",
		 "/db/jlblab/pfam/chromo_viridiplant",
		 "/db/jlblab/pfam/dros_env",
		 );

# Process the features for each BLAST database
foreach my $blastdb (@blast_dbs) {

    print "Processing:\t".$blastdb."\n" if $verbose;

    my $annotated_rpn = seq_annotate ($seq_id, $seq_string, $blastdb, $max_e_val );
    
    # If the feature has a value then print to STDOUT
    if ($annotated_rpn) {
	
	print STDOUT "FEAT NAME:\t".$annotated_rpn->{ feat_name }."\n";
	print STDOUT "    START:\t".$annotated_rpn->{ feat_start }."\n";
	print STDOUT "      END:\t".$annotated_rpn->{ feat_end }."\n";
	print STDOUT "    SEQID:\t".$annotated_rpn->{ qry_id }."\n";
	print STDOUT " FEAT_SEQ:\t".$annotated_rpn->{ feat_seq }."\n";
	print STDOUT "\n";
    }
    
}

my $time_end = Time::HiRes::time();
my $time_to_run = $time_end - $time_start;

# Print time to run if in verbose mode
print STDERR "TIME: $time_to_run\n" if $verbose;

exit;

#-----------------------------------------------------------+ 
# SUBFUNCTIONS                                              |
#-----------------------------------------------------------+

sub print_help {

    # Print requested help or exit.
    # Options are to just print the full 
    my ($opt) = @_;

    my $usage = "USAGE:\n". 
	"MyProg.pl -i InFile -o OutFile";
    my $args = "REQUIRED ARGUMENTS:\n".
	"  --infile       # Path to the input file\n".
	"  --outfile      # Path to the output file\n".
	"\n".
	"OPTIONS::\n".
	"  --version      # Show the program version\n".     
	"  --usage        # Show program usage\n".
	"  --help         # Show this help message\n".
	"  --man          # Open full program manual\n".
	"  --quiet        # Run program with minimal output\n";
	
    if ($opt =~ "full") {
	print "\n$usage\n\n";
	print "$args\n\n";
    }
    else {
	print "\n$usage\n\n";
    }
    
    exit;
}


sub seq_annotate {

    my $max_num_hits = 1;
    my @ans;              # Answer
    my $vals;             # Hash Reference to values
    my $feat_name;
#    bless $vals;

    # annotate a seq from a datbase
    my ($seq_id, $seq_string, $blastdb, $max_e_val ) = @_;
    # dbh is the database handle where the data are to be store
    # seq_id is the id of the query sequence
    # seq_string is the
    # b should set the number of alignments returned
    my @bl_params = ('b'       => 1,
		     'e-value' => $max_e_val,
		     'program' => 'blastx', 
		     'database' => $blastdb);
    my $factory = Bio::Tools::Run::StandAloneBlast->new(@bl_params);
    
    my $qry_input = Bio::Seq->new(-id=> $seq_id,
				  -seq=>$seq_string );
    
    my $blast_report = $factory->blastall($qry_input);

    # This currently assumes a single query sequence was used
    my $hit_count = 0;
    
    while (my $blast_result = $blast_report->next_result()) {

	while (my $blast_hit = $blast_result->next_hit()) {
	    
	    while (my $blast_hsp = $blast_hit->next_hsp())
	    {

		if ($hit_count < $max_num_hits) {
		    my ($feat_start, $feat_end) = $blast_hsp->range('query');

		    # Print to STDERR IF VERBOSE
#		    print STDERR $feat_name."\n" if $verbose;    
#		    print $feat_start."\n" if $verbose;
#		    print $feat_end."\n" if $verbose;
#		    print STDERR
#			$blast_result->query_name."\n" if $verbose;
#		    print STDERR 
#			$blast_hsp->query_string."\n" if $verbose;
		    $hit_count++;
		    #my @range = $blast_hsp->range('query');

		    # Load values to the hash reference
		    #$vals->{'feat_name'} = $feat_name;
		    $vals->{'feat_name'} = $blast_result->database_name;
		    $vals->{'feat_start'} = $feat_start;
		    $vals->{'feat_end'} = $feat_end;
		    $vals->{'qry_id'} = $blast_result->query_name;
		    $vals->{'feat_seq'} = $blast_hsp->query_string;

		} # End of hit_count
	    }
	}
    } # End of while blast_result

    # Return the feature annotation
    if ($hit_count > 0) {
	return $vals;
    }
    else {
	return 0;
    }

}


=head1 NAME

ltr_annotate.pl - Use blast to Annotate LTR retrotransposon

=head1 VERSION

This documentation refers to program version 0.1

=head1 SYNOPSIS

  USAGE:
    Name.pl -i InFile -o OutFile

    --infile        # Path to the input file
    --outfie        # Path to the output file

=head1 DESCRIPTION

This is what the program does

=head1 COMMAND LINE ARGUMENTS

=head2 Required Arguments

=over 2

=item -i,--infile

Path of the input file.

=item -o,--outfile

Path of the output file.

=back

=head1 Additional Options

=over 2

=item --usage

Short overview of how to use program from command line.

=item --help

Show program usage with summary of options.

=item --version

Show program version.

=item --man

Show the full program manual. This uses the perldoc command to print the 
POD documentation for the program.

=item -q,--quiet

Run the program with minimal output.

=back

=head1 DIAGNOSTICS

The list of error messages that can be generated,
explanation of the problem
one or more causes
suggested remedies
list exit status associated with each error

=head1 CONFIGURATION AND ENVIRONMENT

Names and locations of config files
environmental variables
or properties that can be set.

=head1 DEPENDENCIES

Other modules or software that the program is dependent on.

=head1 BUGS AND LIMITATIONS

Any known bugs and limitations will be listed here.

=head1 LICENSE

GNU General Public License, Version 3

L<http://www.gnu.org/licenses/gpl.html>

=head1 AUTHOR

James C. Estill E<lt>JamesEstill at gmail.comE<gt>

=head1 HISTORY

STARTED:

UPDATED:

VERSION: $Rev$

=cut

#-----------------------------------------------------------+
# HISTORY                                                   |
#-----------------------------------------------------------+
#
